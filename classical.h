#pragma once
#include <stdio.h>                      //输入输出
#include <Windows.h>                    //Beep
#include <graphics.h>                   //图形库
#include <conio.h>                      //图形库
#include <easyx.h>                      //图形库
#include "scorePlay.h"
#include <time.h>
#include "Music.h"

void classical(void)
{
	int x = selectClassical();

	//欣赏曲目
	if (x == 0)
		return;
	if (x == 1)
		listen();
	//敲击评分
	else if (x == 2)
		Score();
}


int length;   //链表的长度

void listen(void)
{
	static IMAGE bkimg;
	static char k = 1;
	if (k == 1) {
		loadimage(&bkimg, _T("图片素材\\音乐欣赏.jpg"));
		k = 0;
	}
	cleardevice();
	putimage(-150, 0, &bkimg);
	setbkmode(TRANSPARENT);		        // 设置文字背景为透明色

	LPCTSTR x = _T("请输入曲目名称：");
	outtextxy(320, 180, x);

	settextstyle(25, 0, _T("微软雅黑"));
	LPCTSTR y = _T("按Esc键返回主菜单");
	outtextxy(10, 10, y);

	settextstyle(25, 0, _T("楷体"));
	LPCTSTR y1 = _T("Memory of Childhood");
	outtextxy(50, 100, y1);
	LPCTSTR y2 = _T("The Way");
	outtextxy(50, 140, y2);
	LPCTSTR y3 = _T("Quiet Afternoon");
	outtextxy(50, 180, y3);
	LPCTSTR y4 = _T("Colorful Moon");
	outtextxy(50, 220, y4);
	LPCTSTR y5 = _T("Going Home");
	outtextxy(50, 260, y5);
	LPCTSTR y6 = _T("Kiss the Rain");
	outtextxy(50, 300, y6);
	LPCTSTR y7 = _T("Open Credits");
	outtextxy(50, 340, y7);


	//char name[20];
	char name[30];

	int index = 0;
	while (1)
	{
		TCHAR c = getch();
		settextstyle(30, 0, _T("楷体"));
		if (c == 13)
			break;
		if (c == 27)
			return;
		if (c == 8) {
			//判定退格键，下标-1
			index--;
			//清除当前页面缓存，刷新页面，重新加载信息
			cleardevice();
			loadimage(&bkimg, _T("图片素材\\音乐欣赏.jpg"));
			putimage(-150, 0, &bkimg);
			setbkmode(TRANSPARENT);		        // 设置文字背景为透明色
			settextstyle(30, 0, _T("微软雅黑"));
			LPCTSTR x = _T("请输入曲目名称：");
			outtextxy(320, 180, x);
			settextstyle(25, 0, _T("微软雅黑"));
			LPCTSTR y = _T("按Esc键返回主菜单");
			outtextxy(10, 10, y);

			settextstyle(25, 0, _T("楷体"));
			LPCTSTR y1 = _T("Memory of Childhood");
			outtextxy(50, 100, y1);
			LPCTSTR y2 = _T("The Way");
			outtextxy(50, 140, y2);
			LPCTSTR y3 = _T("Quiet Afternoon");
			outtextxy(50, 180, y3);
			LPCTSTR y4 = _T("Colorful Moon");
			outtextxy(50, 220, y4);
			LPCTSTR y5 = _T("Going Home");
			outtextxy(50, 260, y5);
			LPCTSTR y6 = _T("Kiss the Rain");
			outtextxy(50, 300, y6);
			LPCTSTR y7 = _T("Open Credits");
			outtextxy(50, 340, y7);
			//还原已输入信息
			for (int inner_i = 0; inner_i < index; inner_i++) {
				settextstyle(30, 0, _T("楷体"));
				outtextxy(320 + 15 * inner_i, 250, name[inner_i]);
			}
			continue;
		}
		outtextxy(320 + 15 * index, 250, c);
		name[index] = c;
		index++;
	}
	name[index] = '\0';
	settextstyle(30, 0, _T("微软雅黑"));

	//搜索曲目
	music* p = head->next;
	int i, n = 1;
	setbkmode(TRANSPARENT);		        // 设置文字背景为透明色
	while (p != NULL)
	{
		if (strcmp(p->name, name) == 0)
		{
			cleardevice();
			putimage(-150, 0, &bkimg);
			setbkmode(TRANSPARENT);		        // 设置文字背景为透明色

			TCHAR s1[] = _T("歌曲信息如下：");
			outtextxy(150, 100, s1);

			TCHAR s2[] = _T("歌曲名称：");
			outtextxy(150, 150, s2);
			TCHAR c2[20];
			for (i = 0; p->name[i] != '\0'; i++)
				c2[i] = p->name[i];
			c2[i] = '\0';
			outtextxy(300, 150, c2);

			TCHAR s3[] = _T("演奏者：");
			outtextxy(150, 200, s3);
			TCHAR c3[20];
			for (i = 0; p->player[i] != '\0'; i++)
				c3[i] = p->player[i];
			c3[i] = '\0';
			outtextxy(300, 200, c3);

			TCHAR s4[] = _T("所属专辑：");
			outtextxy(150, 250, s4);
			//TCHAR c4[20];
			TCHAR c4[25];
			for (i = 0; p->album[i] != '\0'; i++)
				c4[i] = p->album[i];
			c4[i] = '\0';
			outtextxy(300, 250, c4);

			TCHAR s5[] = _T("出版时间：");
			outtextxy(150, 300, s5);
			TCHAR c5[20];
			for (i = 0; p->time[i] != '\0'; i++)
				c5[i] = p->time[i];
			c5[i] = '\0';
			outtextxy(300, 300, c5);

			settextstyle(25, 0, _T("微软雅黑"));
			LPCTSTR y = _T("按Esc键返回主菜单");
			outtextxy(10, 10, y);

			break;
		}
		n++;
		p = p->next;
	}

	settextstyle(30, 0, _T("微软雅黑"));

	if (p == NULL)
	{
		cleardevice();
		putimage(-150, 0, &bkimg);
		setbkmode(TRANSPARENT);		        // 设置文字背景为透明色
		TCHAR s[] = _T("没有这首曲目的记录！");
		outtextxy(320 - textwidth(x) / 2, 200, s);
		settextstyle(25, 0, _T("微软雅黑"));
		LPCTSTR y = _T("按Esc键返回主菜单");
		outtextxy(10, 10, y);
		char c = getch();
		if (c == 27)
			return;
	}

	if (n == 1)PlaySound(TEXT("音乐素材\\Memory of Childhood.wav"), NULL, SND_FILENAME | SND_ASYNC);
	if (n == 2)PlaySound(TEXT("音乐素材\\The Way.wav"), NULL, SND_FILENAME | SND_ASYNC);
	if (n == 3)PlaySound(TEXT("音乐素材\\Quiet Afternoon.wav"), NULL, SND_FILENAME | SND_ASYNC);
	if (n == 4)PlaySound(TEXT("音乐素材\\Colorful Moon.wav"), NULL, SND_FILENAME | SND_ASYNC);
	if (n == 5)PlaySound(TEXT("音乐素材\\Going Home.wav"), NULL, SND_FILENAME | SND_ASYNC);
	if (n == 6)PlaySound(TEXT("音乐素材\\Kiss the Rain.wav"), NULL, SND_FILENAME | SND_ASYNC);
	if (n == 7)PlaySound(TEXT("音乐素材\\Open Credits.wav"), NULL, SND_FILENAME | SND_ASYNC);

	TCHAR c = getch();
	if (c == 27) {
		PlaySound(NULL, NULL, SND_FILENAME | SND_ASYNC);
		return;
	}
}

void Score(void)
{
	static IMAGE bkimg;
	static char k = 1;
	if (k == 1) {
		loadimage(&bkimg, _T("图片素材\\音乐欣赏.jpg"));
		k = 0;
	}
	cleardevice();
	putimage(-150, 0, &bkimg);
	setbkmode(TRANSPARENT);		        // 设置文字背景为透明色

	LPCTSTR x = _T("请输入曲目名称：");
	outtextxy(320, 180, x);

	settextstyle(25, 0, _T("微软雅黑"));
	LPCTSTR y = _T("按Esc键返回主菜单");
	outtextxy(10, 10, y);

	settextstyle(25, 0, _T("楷体"));
	LPCTSTR y1 = _T("Colorful Moon");
	outtextxy(50, 100, y1);
	LPCTSTR y2 = _T("The Way");
	outtextxy(50, 150, y2);
	LPCTSTR y3 = _T("Quiet Afternoon");
	outtextxy(50, 200, y3);

	//char name[20];
	char name[30];

	int index = 0;
	settextstyle(30, 0, _T("楷体"));
	while (1)
	{
		TCHAR c = getch();
		if (c == 13)
			break;
		if (c == 27)
			return;
		if (c == 8) {
			//判定退格键，下标-1
			index--;
			//清除当前页面缓存，刷新页面，重新加载信息
			cleardevice();
			loadimage(&bkimg, _T("图片素材\\音乐欣赏.jpg"));
			putimage(-150, 0, &bkimg);
			setbkmode(TRANSPARENT);		        // 设置文字背景为透明色
			settextstyle(30, 0, _T("微软雅黑"));
			LPCTSTR x = _T("请输入曲目名称：");
			outtextxy(320, 180, x);
			settextstyle(25, 0, _T("微软雅黑"));
			LPCTSTR y = _T("按Esc键返回主菜单");
			outtextxy(10, 10, y);
			settextstyle(25, 0, _T("楷体"));
			LPCTSTR y1 = _T("Colorful Moon");
			outtextxy(50, 100, y1);
			LPCTSTR y2 = _T("The Way");
			outtextxy(50, 150, y2);
			LPCTSTR y3 = _T("Quiet Afternoon");
			outtextxy(50, 200, y3);
			//还原已输入信息
			for (int inner_i = 0; inner_i < index; inner_i++) {
				settextstyle(30, 0, _T("楷体"));
				outtextxy(320 + 15 * inner_i, 250, name[inner_i]);
			}
			continue;
		}
		outtextxy(320 + 15 * index, 250, c);
		name[index] = c;
		index++;
	}
	name[index] = '\0';
	settextstyle(30, 0, _T("微软雅黑"));

	music* p = head->next;

	setbkmode(TRANSPARENT);		        // 设置文字背景为透明色
	int n = 1;
	while (p != NULL)
	{
		if (strcmp(p->name, name) == 0)
			break;
		n++;
		p = p->next;
	}

	if (p == NULL)
	{
		TCHAR s[] = _T("没有这首曲目的记录！");
		outtextxy(400, 300, s);
	}


	fflush(stdin);          //刷新键盘缓存区				
	HWND hwnd = GetHWnd();  // 获取窗口句柄


	//开始绘制
	BeginBatchDraw();
	cleardevice();
	putimage(-150, 0, &bkimg);
	DWORD start, stop;
	start = GetTickCount();

	int* code;

	int code2[] = {

		600,1,0,   800,1,0,   1000,1,0,   1200,1,0,   1600,0,1,   2000,0,1,   2400,1,0,   2800,1,0,   3200,1,0,
		4200,1,0,   4300,1,0,   4400,1,0,   4600,1,0,   4800,1,0,   5200,0,1,   5600,0,1,   6000,1,0,   6200,1,0,   6400,1,0,   6600,1,0,   6800,1,0,
		7700,1,0,   7900,1,0,   8100,1,0,   8300,1,0,   8700,0,1,   9100,0,1,   9500,1,0,   9900,1,0,   10300,1,0,
		11200,1,0,   11300,1,0,   11400,1,0,   11600,1,0,   11800,1,0,   12200,0,1,   12600,0,1,   13000,1,0,   13200,1,0,   13400,1,0,   13600,1,0,   13800,1,0,   14300,0,1,   14700,0,1,

		16050,1,0,   16450,1,0,   16650,1,0,   17250,0,1,   17450,0,1,   17750,1,0,   18150,1,0,   18350,1,0,   18950,0,1,   19150,0,1,
		19450,1,0,   19650,1,0,   19850,1,0,   20050,1,0,   21000,0,1,   21200,0,1,   21400,0,1,
		23050,1,0,   23450,1,0,   23650,1,0,   24250,0,1,   24450,0,1,   24750,1,0,   25150,1,0,   25350,1,0,   25950,0,1,   26150,0,1,
		26450,1,0,   26650,1,0,   26850,1,0,   27050,1,0,   28000,0,1,   28200,0,1,   28400,0,1,

		29100,1,0,   29300,1,0,   29500,1,0,   29700,1,0,   29900,1,0,   30200,0,1,   30800,1,0,   31400,0,1,   32000,1,0,
		32600,1,0,   32800,1,0,   33000,1,0,   33200,1,0,   33400,1,0,   33700,0,1,   34300,1,0,   34900,0,1,   35500,1,0,
		36100,1,0,   36300,1,0,   36500,1,0,   36700,1,0,   36900,1,0,   37200,0,1,   37800,1,0,   38400,0,1,   39000,1,0,
		39600,1,0,   39800,1,0,   40000,1,0,   40200,1,0,   40400,1,0,   40700,0,1,

		43600,1,0,   43800,1,0,   44000,1,0,   44200,1,0,   44500,0,1,   44900,0,1,   45400,1,0,   45800,1,0,   46200,1,0,
		47100,1,0,   47200,1,0,   47300,1,0,   47500,1,0,   47700,1,0,   48000,0,1,   48400,0,1,   48900,1,0,   49100,1,0,   49300,1,0,   49500,1,0,   49700,1,0,
		50700,1,0,   50900,1,0,   51100,1,0,   51300,1,0,   51600,0,1,   52000,0,1,   52500,1,0,   52900,1,0,   53300,1,0,
		54200,1,0,   54300,1,0,   54400,1,0,   54600,1,0,   54800,1,0,   55100,0,1,   55500,0,1,   56000,1,0,   56200,1,0,   56400,1,0,   56600,1,0,   56800,1,0,   57300,0,1,   57700,0,1,

		58710,1,0,   59140,0,1,   59600,1,0,   60020,0,1,   60460,1,0,   60900,0,1,   61330,1,0,   61760,0,1,   62190,1,0,   62620,0,1,   63050,1,0,   63480,0,1,   63920,1,0,
		65720,1,0,   66150,0,1,   66610,1,0,   67030,0,1,   67470,1,0,   67910,0,1,   68340,1,0,   68770,0,1,   69200,1,0,   69630,0,1,   70060,1,0,   70490,0,1,   70930,1,0,
		72770,1,0,   73200,0,1,   73660,1,0,   74080,0,1,   74520,1,0,   74960,0,1,   75390,1,0,   75820,0,1,   76250,1,0,   76680,0,1,   77110,1,0,   77540,0,1,   77980,1,0,
		79800,1,0,   80230,0,1,   80690,1,0,   81110,0,1,   81550,1,0,   81990,0,1,   82420,1,0,   82850,0,1,   83280,1,0,   83710,0,1,   84140,1,0,   84570,0,1,   85010,1,0,
		86870,1,0,   87300,0,1,   87760,1,0,   88180,0,1,   88620,1,0,   89060,0,1,   89490,1,0,   89920,0,1,   90350,1,0,   90780,0,1,   91210,1,0,   91650,0,1,   92080,1,0,
		93910,1,0,   94340,0,1,   94800,1,0,   95220,0,1,   95660,1,0,   96100,0,1,   96530,1,0,   96960,0,1,   97390,1,0,   97820,0,1,   98250,1,0,   98680,0,1,   99120,1,0,

		100500,1,0,   100700,1,0,   100900,1,0,   101100,1,0,   101400,0,1,   101800,0,1,   102300,1,0,   102700,1,0,   103100,1,0,
		104000,1,0,   104100,1,0,   104200,1,0,   104400,1,0,   104600,1,0,   104900,0,1,   105300,0,1,   105800,1,0,   106000,1,0,   106200,1,0,   106400,1,0,   106600,1,0,
		107600,1,0,   107800,1,0,   108000,1,0,   108200,1,0,   108500,0,1,   108900,0,1,   109400,1,0,   109800,1,0,   110200,1,0,
		111100,1,0,   111200,1,0,   111300,1,0,   111500,1,0,   111700,1,0,   112000,0,1,   112400,0,1,   112900,1,0,   113100,1,0,   113300,1,0,   113500,1,0,   113700,1,0,
		114500,1,0,   114700,1,0,   114900,1,0,   115100,1,0,   115400,0,1,   115800,0,1,   116300,1,0,   116700,1,0,   117100,1,0,
		118000,1,0,   118100,1,0,   118200,1,0,   118400,1,0,   118600,1,0,   118900,0,1,   119300,0,1,   119800,1,0,   120000,1,0,   120200,1,0,   120400,1,0,   120600,1,0,
		121600,1,0,   121800,1,0,   122000,1,0,   122200,1,0,   122500,0,1,   122900,0,1,   123400,1,0,   123800,1,0,   124200,1,0,
		125100,1,0,   125200,1,0,   125300,1,0,   125500,1,0,   125700,1,0,   126000,0,1,   126400,0,1,   126900,1,0,   127100,1,0,   127300,1,0,   127500,1,0,   127700,1,0

	};

	int code3[] = {

		1200,1,0,   1400,1,0,   1600,1,0,   1800,1,0,   2000,1,1,
		3300,0,1,   3500,0,1,   4100,0,1,   4300,0,1,   4900,1,0,   5100,1,0,
		8000,1,0,   8200,1,0,   8400,1,0,   8600,1,0,   8800,1,1,
		10100,0,1,   10300,0,1,   11100,0,1,   11300,0,1,   11900,1,0,   12100,1,0,
		15400,0,1,   15600,0,1,   17000,0,1,   17200,0,1,   18000,0,1,   18200,0,1,   18800,1,0,   19000,1,0,
		22400,0,1,   22600,0,1,   24000,0,1,   24200,0,1,   25000,0,1,   25200,0,1,   25800,1,0,   26000,1,0,
		29400,0,1,   29600,0,1,   29800,0,1,   31100,0,1,   31300,0,1,   32100,0,1,   32300,0,1,   33100,1,0,   33300,1,0,
		36200,0,1,   36400,0,1,   36600,0,1,   36800,0,1,   37000,0,1,   38100,0,1,   38300,0,1,   39100,0,1,   39300,0,1,   40100,1,0,   40300,1,0,

		43200,1,0,   43400,1,0,   43600,1,0,   43800,1,0,   44000,1,1,
		45300,0,1,   45500,0,1,   46100,0,1,   46300,0,1,   46900,1,0,   47100,1,0,
		50200,1,0,   50400,1,0,   50600,1,0,   50800,1,0,   51000,1,1,
		52300,0,1,   52500,0,1,   53100,0,1,   53300,0,1,   53900,1,0,   54100,1,0,

		58500,1,1,   59600,1,1,   60200,1,1,   60900,0,1,   61100,0,1,   61700,0,1,   61900,0,1,
		65300,1,0,   65600,1,0,   66300,1,1,   69600,1,0,   70000,1,0,   70300,1,0,   70600,1,0,
		73000,1,0,   73400,1,0,   73800,1,0,   74100,1,0,   75200,1,0,   75400,1,0,   75600,1,0,   75800,1,0,   76000,1,0,
		80000,1,0,   80300,1,0,   80800,1,0,   81000,1,0,   81600,1,0,   81800,1,0,   82600,1,0,   83000,1,0,   83400,1,0,   83800,1,0,   84200,1,0,   84500,1,0,
		86200,1,0,   86500,1,1,   86800,1,0,   87200,1,0,   87700,0,1,   88000,0,1,   88400,0,1,
		90000,0,1,   90300,0,1,
		93000,0,1,   93200,0,1,   94700,0,1,   94900,0,1,   95600,0,1,   95800,0,1,   96500,1,0,   96700,1,0,
		100000,0,1,   100400,0,1,   101600,0,1,   101800,0,1,   102400,0,1,   102600,0,1,   103300,1,0,   103500,1,0,

		107000,0,1,   107200,0,1,   108500,0,1,   108700,0,1,   109500,0,1,   109700,0,1,   110500,1,0,   110700,1,0,
		113800,0,1,   114000,0,1,   115400,0,1,   115600,0,1,   116000,0,1,   116200,0,1,   116900,1,0,   117100,1,0,

		120400,1,0,   120600,1,0,   120800,1,0,   121000,1,0,   121200,1,1,
		122500,0,1,   122700,0,1,   123300,0,1,   123500,0,1,   124100,1,0,   124300,1,0,
		127500,1,0,   127700,1,0,   127900,1,0,   128100,1,0,   128300,1,1,
		129600,0,1,   129800,0,1,   130400,0,1,   130600,0,1,   131200,1,0,   131400,1,0,

		135000,0,1,   135200,0,1,   136400,0,1,   136600,0,1,   137800,0,1,   138000,0,1,   138600,1,0,   138800,1,0,
		141600,0,1,   141900,0,1,   142100,0,1,   142300,0,1,   142500,0,1,   143700,0,1,   143900,0,1,   144700,0,1,   145000,0,1,   146000,1,0,   146600,1,0

	};

	int code4[] = {

		0,1,0,   250,1,0,   525,1,1,
		1750,1,0,   1975,1,0,   2200,1,0,   2425,1,0,   2900,0,1,   3150,0,1,   3400,0,1,   3650,0,1,   3925,0,1,
		4700,1,0,   4950,1,0,   5225,1,1,
		6450,1,0,   6675,1,0,   6900,1,0,   7125,1,0,   7600,0,1,   7850,0,1,   8100,0,1,   8350,0,1,   8625,0,1,
		9400,1,0,   9650,1,0,   9925,1,1,
		11150,1,0,   11375,1,0,   11600,1,0,   11825,1,0,   12300,0,1,   12550,0,1,   12800,0,1,   13050,0,1,   13325,0,1,
		14100,1,0,   14350,1,0,   14625,1,1,
		15975,1,0,   16200,1,0,   16425,1,0,   16650,1,0,   17100,0,1,   17350,0,1,   17600,0,1,   17850,0,1,   18125,0,1,

		18800,1,0,   19050,1,0,   19350,1,1,   20100,1,0,   20375,1,1,   21125,1,0,   21700,0,1,   22200,0,1,   22700,0,1,
		23500,1,0,   23750,1,0,   24050,1,1,   24800,1,0,   25075,1,1,   25825,1,0,   26400,0,1,   26900,0,1,   27400,0,1,
		28200,1,0,   28450,1,0,   28750,1,1,   29500,1,0,   29775,1,1,   30525,1,0,   31100,0,1,   31600,0,1,   32100,0,1,
		32900,1,0,   33150,1,0,   33450,1,1,   35000,1,0,   35300,1,0,   35600,1,0,   35900,1,1,

		38200,1,0,   39000,0,1,   39400,1,0,   40000,0,1,   40600,1,0,   40850,1,0,   41100,1,0,   41350,1,0,   41625,1,0,
		42900,1,0,   43700,0,1,   44100,1,0,   44700,0,1,   45300,1,0,   45550,1,0,   45800,1,0,   46050,1,0,   46325,1,0,
		47600,1,0,   48400,0,1,   48800,1,0,   49400,0,1,   50000,1,0,   50250,1,0,   50500,1,0,   50750,1,0,   51025,1,0,
		52300,1,0,   53100,0,1,   53500,1,0,   54100,0,1,   54700,1,0,   54950,1,0,   55200,1,0,   55450,1,0,   55725,1,0,
		57000,1,0,   57800,0,1,   58200,1,0,   58800,0,1,   59400,1,0,   59650,1,0,   59900,1,0,   60150,1,0,   60425,1,0,
		61700,1,0,   62500,0,1,   62900,1,0,   63500,0,1,   64100,1,0,   64350,1,0,   64600,1,0,   64850,1,0,   65125,1,0,
		66400,1,0,   67200,0,1,   67600,1,0,   68200,0,1,   68800,1,0,   69050,1,0,   69300,1,0,   69550,1,0,   69825,1,0,
		71100,1,0,   71900,0,1,   72300,1,0,   72900,0,1,   73500,1,0,   73750,1,0,   74000,1,0,   74250,1,0,   74525,1,0,

		75300,1,0,   75550,1,0,   75850,1,1,   76600,1,0,   76875,1,1,   77625,1,0,   78200,0,1,   78700,0,1,   79200,0,1,
		80000,1,0,   80250,1,0,   80550,1,1,   81300,1,0,   81575,1,1,   82325,1,0,   82900,0,1,   83400,0,1,   83900,0,1,
		84700,1,0,   84950,1,0,   85250,1,1,   86000,1,0,   86275,1,1,   87025,1,0,   87600,0,1,   88100,0,1,   88600,0,1,
		89400,1,0,   89650,1,0,   89950,1,1,   91400,1,0,   91700,1,0,   92000,1,0,   92300,1,1,

		94600,1,0,   95400,0,1,   95800,1,0,   96400,0,1,   97000,1,0,   97250,1,0,   97500,1,0,   97750,1,0,   98025,1,0,
		99300,1,0,   100100,0,1,   100500,1,0,   101100,0,1,   101700,1,0,   101950,1,0,   102200,1,0,   102450,1,0,   102725,1,0,
		104000,1,0,   104800,0,1,   105200,1,0,   105800,0,1,   106400,1,0,   106650,1,0,   106900,1,0,   107150,1,0,   107425,1,0,
		108700,1,0,   109500,0,1,   109900,1,0,   110500,0,1,   111100,1,0,   111350,1,0,   111600,1,0,   111850,1,0,   112125,1,0,

		113600,0,1,   113850,0,1,   114100,0,1,   114350,0,1,   114600,0,1,
		115900,1,0,   116150,1,0,   116400,1,0,   116650,1,0,   116900,1,0,
		118300,0,1,   118550,0,1,   118800,0,1,   119050,0,1,   119300,0,1,
		120600,1,0,   120850,1,0,   121100,1,0,   121350,1,0,   121600,1,0,
		123000,0,1,   123250,0,1,   123500,0,1,   123750,0,1,   124000,0,1,
		125300,1,0,   125550,1,0,   125800,1,0,   126050,1,0,   126300,1,0,
		127700,0,1,   127950,0,1,   128200,0,1,   128450,0,1,   128700,0,1,
		130000,1,0,   130250,1,0,   130500,1,0,   130750,1,0,   131000,1,0,

		131600,1,0,   131850,1,0,   132150,1,1,   132900,1,0,   133175,1,1,   133925,1,0,   134600,0,1,   135100,0,1,   135500,0,1,
		136300,1,0,   136550,1,0,   136850,1,1,   137600,1,0,   137875,1,1,   138625,1,0,   139200,0,1,   139700,0,1,   140200,0,1,
		141000,1,0,   141250,1,0,   141550,1,1,   142300,1,0,   142575,1,1,   143325,1,0,   143900,0,1,   144400,0,1,   144900,0,1,
		145700,1,0,   145950,1,0,   146250,1,1,   147700,1,0,   148000,1,0,   148300,1,0,   148600,1,1,

		151000,1,0,   151800,0,1,   152200,1,0,   152800,0,1,   153400,1,0,   153650,1,0,   153900,1,0,   154150,1,0,   154425,1,0,
		155700,1,0,   156500,0,1,   156900,1,0,   157500,0,1,   158100,1,0,   158350,1,0,   158600,1,0,   158850,1,0,   159125,1,0,
		160400,1,0,   161200,0,1,   161600,1,0,   162200,0,1,   162800,1,0,   163050,1,0,   163300,1,0,   163550,1,0,   163825,1,0,
		165100,1,0,   165900,0,1,   166300,1,0,   166900,0,1,   167500,1,0,   167750,1,0,   168000,1,0,   168250,1,0,   168525,1,0,
		169800,1,0,   170600,0,1,   171000,1,0,   171600,0,1,   172200,1,0,   172450,1,0,   172700,1,0,   172950,1,0,   173225,1,0,
		174500,1,0,   175300,0,1,   175700,1,0,   176300,0,1,   176900,1,0,   177150,1,0,   177400,1,0,   177650,1,0,   177925,1,0,
		179200,1,0,   180000,0,1,   180400,1,0,   181000,0,1,   181600,1,0,   181850,1,0,   182100,1,0,   182350,1,0,   182625,1,0,
		183900,1,0,   184700,0,1,   185100,1,0,   185700,0,1,   186300,1,0,   186550,1,0,   186800,1,0,   187050,1,0,   187325,1,0,

		188200,0,1,   188400,0,1,   188600,1,1,   189400,0,1,   189800,1,1,   190400,0,1,   191000,1,0,   191250,1,0,   191500,1,0,   191750,1,0,   192025,1,0,
		193300,1,1,   194100,0,1,   194500,1,1,   195100,0,1,   195300,0,1,   195700,1,0,
		197600,0,1,   197800,0,1,   198000,1,1,   198800,0,1,   199100,1,1,   199900,0,1,   200400,1,0,   201100,1,0,   201400,1,0,
		202300,0,1,   202500,0,1,   202700,1,1,   203600,0,1,   203900,1,1,   204400,1,0,   204900,1,0,

		207400,1,0,   208200,0,1,   208600,1,0,   209200,0,1,   209800,1,0,   210050,1,0,   210300,1,0,   210550,1,0,   210825,1,0,
		212100,1,0,   212900,0,1,   213300,1,0,   213900,0,1,   214500,1,0,   214750,1,0,   215000,1,0,   215250,1,0,   215525,1,0,
		216800,1,0,   217600,0,1,   218000,1,0,   218600,0,1,   219200,1,0,   219450,1,0,   219700,1,0,   219950,1,0,   220225,1,0,
		221500,1,0,   222300,0,1,   222700,1,0,   223300,0,1,   223900,1,0,   224150,1,0,   224400,1,0,   224650,1,0,   224925,1,0,
		226200,1,0,   227000,0,1,   227400,1,0,   228000,0,1,   228600,1,0,   228850,1,0,   229100,1,0,   229350,1,0,   229625,1,0,
		230900,1,0,   231700,0,1,   232100,1,0,   232700,0,1,   233300,1,0,   233550,1,0,   233800,1,0,   234050,1,0,   234325,1,0,
		235600,1,0,   236400,0,1,   236800,1,0,   237400,0,1,   238000,1,0,   238250,1,0,   238500,1,0,   238750,1,0,   239025,1,0

	};
	if (n == 2)code = code2;
	else if (n == 3)code = code3;
	else if (n == 4)code = code4;

	int code_point = 0;
	int play_flag = 1;
	while (1) {
		stop = GetTickCount();
		static_game();
		Update();

		//延时1S播放音乐
		if (play_flag && play_flag) {
			if (stop - start > 750) {
				play_flag = 0;
				//播放音乐
				if (n == 1)PlaySound(TEXT("音乐素材\\Memory of Childhood.wav"), NULL, SND_FILENAME | SND_ASYNC);
				if (n == 2)PlaySound(TEXT("音乐素材\\The Way.wav"), NULL, SND_FILENAME | SND_ASYNC);
				if (n == 3)PlaySound(TEXT("音乐素材\\Quiet Afternoon.wav"), NULL, SND_FILENAME | SND_ASYNC);
				if (n == 4)PlaySound(TEXT("音乐素材\\Colorful Moon.wav"), NULL, SND_FILENAME | SND_ASYNC);
				if (n == 5)PlaySound(TEXT("音乐素材\\Going Home.wav"), NULL, SND_FILENAME | SND_ASYNC);
				if (n == 6)PlaySound(TEXT("音乐素材\\Kiss the Rain.wav"), NULL, SND_FILENAME | SND_ASYNC);
				if (n == 7)PlaySound(TEXT("音乐素材\\Open Credits.wav"), NULL, SND_FILENAME | SND_ASYNC);
			}

		}

		if (stop - start > code[code_point]) {
			int isR = code[code_point + 1];
			int isL = code[code_point + 2];
			code_point += 3;
			if (isR && !isL) {
				track(1, 0);
			}
			else if (isR && isL) {
				track(1, 1);
			}
			else if (!isR && isL) {
				track(0, 1);
			}
		}
		else {
			track(0, 0);
		}

		int k = UpdateWithInput();
		if (k == 1) {
			break;
		}
	}
	EndBatchDraw();
}



int selectClassical(void) {
	static IMAGE bkimg;
	static char k = 1;
	if (k == 1) {
		loadimage(&bkimg, _T("图片素材\\选择界面.jpg"));
		k = 0;
	}
	cleardevice();
	putimage(-200, 0, &bkimg);
	setbkmode(TRANSPARENT);		        // 设置文字背景为透明色

	LPCTSTR y = _T("按Esc键返回主菜单");
	outtextxy(10, 10, y);
	LPCTSTR x = _T("按X键  欣赏曲目");
	outtextxy(320 - textwidth(x) / 2, 150, x);
	LPCTSTR t = _T("按T键  弹奏评分");
	outtextxy(320 - textwidth(t) / 2, 200, t);
	int result = -1;
	char c;
	while (1) {
		if (_kbhit) {
			c = _getch();
			if (c == 'x') {
				result = 1;
				break;
			}
			else if (c == 27)
				return 0;
			else if (c == 't') {
				result = 2;
				break;
			}
		}
	}
	return result;
}